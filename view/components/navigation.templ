package components

import (
	"fmt"

	"github.com/guitarrich/headless-go-htmx/model"
	"github.com/guitarrich/headless-go-htmx/sitecore/render"
)

type NavigationModel struct {
	Id              string
	Styles          []string
	Href            string
	Querystring     string
	NavigationTitle string
	Children        []NavigationModel
}

func Navigation(props model.PlaceholderComponent) templ.Component {
	fields := props.Fields.([]interface{})[0].(map[string]interface{})

	model := buildNavigationModel(fields)
	return defaultNavigation(props, model)
}

func buildNavigationModel(fields map[string]interface{}) NavigationModel {

	// Build the model from the props
	var model NavigationModel
	model.Id = getSafeString(fields["Id"])
	model.Href = getSafeString(fields["Href"])
	model.Styles = getStyles(fields["Styles"])
	model.Querystring = getSafeString(fields["Querystring"])
	model.NavigationTitle = getNavigationTitle(fields["NavigationTitle"])
	model.Children = []NavigationModel{}

	if fields["Children"] != nil {
		children := fields["Children"].([]interface{})
		for _, child := range children {
			model.Children = append(model.Children, buildNavigationModel(child.(map[string]interface{})))
		}
	}

	return model
}

func getSafeString(field interface{}) string {
	if field == nil {
		fmt.Println("GetSafeString: nil")
		return ""
	}
	return field.(string)
}

func getStyles(field interface{}) []string {
	if field == nil {
		return []string{}
	}
	tmp := field.([]interface{})
	var result = []string{}
	for _, v := range tmp {
		result = append(result, v.(string))
	}

	return result
}

func getNavigationTitle(field interface{}) string {
	if field == nil {
		return ""
	}

	return field.(map[string]interface{})["value"].(string)
}

templ defaultNavigation(props model.PlaceholderComponent, model NavigationModel) {
	<div class={ render.DecorateComponent("component navigation", props) }>
		<div class="bg-scwhite md:bg-gradient-sc bg-xl text-scwhite">
			<nav class="w-full shadow-md">
				<div>
					<div class="hidden md:block">
						<div class="mx-auto flex max-w-[1004px] justify-between p-4"></div>
						<div class="bg-scwhite text-scblack">
							<div
								class="item-center relative mx-auto box-border flex w-[1004px] max-w-full flex-wrap justify-start px-5"
							>
								for _, item := range model.Children {
									<a href={ templ.URL(item.Href) } class="flex flex-auto">
										{ item.NavigationTitle }
									</a>
								}
							</div>
						</div>
					</div>
				</div>
			</nav>
		</div>
	</div>
}
