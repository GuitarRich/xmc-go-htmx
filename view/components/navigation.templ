package components

import (
	"github.com/guitarrich/headless-go-htmx/model"
	"fmt"
)

type NavigationModel struct {
	Id             string
	Styles         []string
	Href           string
	Querystring    string
	NavitaionTitle string
	Children       []NavigationModel
}

func Navigation(props model.PlaceholderComponent) templ.Component {
	fmt.Println("Navigation[" + props.ComponentName + "]")
	fields := props.Fields.([]interface{})[0].(map[string]interface{})

	model := buildNavigationModel(fields)
	return defaultNavigation(props, model)
}

func buildNavigationModel(fields map[string]interface{}) NavigationModel {

	// Build the model from the props
	var model NavigationModel
	model.Id = getSafeString(fields["Id"])
	model.Href = getSafeString(fields["Href"])
	model.Styles = getStyles(fields["Styles"])
	model.Querystring = getSafeString(fields["Querystring"])
	model.NavitaionTitle = getNavigationTitle(fields["NavigationTitle"])
	model.Children = []NavigationModel{}

	if fields["Children"] != nil {
		children := fields["Children"].([]interface{})
		for _, child := range children {
			model.Children = append(model.Children, buildNavigationModel(child.(map[string]interface{})))
		}
	}

	return model
}

func getSafeString(field interface{}) string {
	if field == nil {
		fmt.Println("GetSafeString: nil")
		return ""
	}
	return field.(string)
}

func getStyles(field interface{}) []string {
	if field == nil {
		return []string{}
	}
	tmp := field.([]interface{})
	var result = []string{}
	for _, v := range tmp {
		result = append(result, v.(string))
	}

	return result
}

func getNavigationTitle(field interface{}) string {
	if field == nil {
		return ""
	}

	return field.(map[string]interface{})["value"].(string)
}

templ defaultNavigation(props model.PlaceholderComponent, model NavigationModel) {
	<nav class="w-full flex flex-wrap relative bg-gray-800 text-white">
		<div class="w-full flex flex-wrap relative">
			<ul class="w-full flex flex-wrap relative">
				<li class="w-full flex flex-wrap relative">
					<a href={ templ.SafeURL(model.Href) } class="w-full flex flex-wrap relative">{ model.NavitaionTitle }</a>
				</li>
				for _, child := range model.Children {
					<li class="w-full flex flex-wrap relative">
						<a href={ templ.SafeURL(child.Href) } class="w-full flex flex-wrap relative">{ child.NavitaionTitle }</a>
					</li>
				}
			</ul>
		</div>
	</nav>
}
