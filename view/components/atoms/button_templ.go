// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package atoms

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "strings"
import "github.com/guitarrich/headless-go-htmx/sitecore/render"

const mainButtonClass = `inline-flex items-center justify-center whitespace-nowrap text-sm font-medium
ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring
focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50`

type ButtonStyle string

const (
	ButtonStyleDefault     ButtonStyle = "bg-primary text-primary-foreground hover:bg-primary/90"
	ButtonStyleDescructive             = "bg-destructive text-destructive-foreground hover:bg-destructive/90"
	ButtonStyleOutline                 = "border border-input bg-background hover:bg-accent hover:text-accent-foreground"
	ButtonStyleSecondary               = "bg-secondary text-secondary-foreground hover:bg-secondary/80"
	ButtonStyleGhost                   = "hover:bg-accent hover:text-accent-foreground"
	ButtonStyleLink                    = "text-primary underline-offset-4 hover:underline"
)

type ButtonSize string

const (
	ButtonSizeNormal ButtonSize = "h-10 rounded-md py-2 px-4"
	ButtonSizeSmall             = "h-9 rounded-full px-3"
	ButtonSizeLarge             = "h-11 rounded-full px-8"
	ButtonSizeIcon              = "h-10 rounded-md w-10"
)

type ButtonProps struct {
	Size    ButtonSize  `json:"size"`
	Style   ButtonStyle `json:"style"`
	Classes string      `json:"classes"`
}

func Button(props ButtonProps, fields interface{}, fieldName string, classNames ...string) templ.Component {
	size := props.Size
	style := props.Style

	if size == "" {
		size = ButtonSizeNormal
	}

	if style == "" {
		style = ButtonStyleDefault
	}

	classes := twMerge(string(size), string(style), props.Classes, classNames...)
	return renderButton(fields, fieldName, classes)
}

func union(a, b []string) []string {
	values := make(map[string]bool)

	for _, item := range a {
		values[item] = true
	}

	for _, item := range b {
		if _, ok := values[item]; !ok {
			values[item] = true
		}
	}

	result := make([]string, 0, len(values))
	for key := range values {
		result = append(result, key)
	}

	return result
}

func twMerge(size, style, customClasses string, classNames ...string) string {
	defaultClass := strings.Split(mainButtonClass, " ")

	classes := union(defaultClass, strings.Split(style, " "))
	classes = union(classes, strings.Split(size, " "))
	classes = union(classes, strings.Split(customClasses, " "))

	for _, className := range classNames {
		classes = union(classes, strings.Split(className, " "))
	}

	return strings.Join(classes, " ")
}

func renderButton(fields interface{}, fieldName string, classes string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = render.LinkField(fields, fieldName, classes).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
